var r=(o,n,e)=>new Promise((a,c)=>{var l=t=>{try{i(e.next(t))}catch(s){c(s)}},u=t=>{try{i(e.throw(t))}catch(s){c(s)}},i=t=>t.done?a(t.value):Promise.resolve(t.value).then(l,u);i((e=e.apply(o,n)).next())});import{W as d}from"./index-BPX1yIji.js";import"./vendor-DT9W0nQP.js";import"./router-DiSlgJ0r.js";import"./icons-BAeSp0yz.js";function w(){const o=window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection;let n="unknown";const e=o?o.type||o.effectiveType:null;if(e&&typeof e=="string")switch(e){case"bluetooth":case"cellular":n="cellular";break;case"none":n="none";break;case"ethernet":case"wifi":case"wimax":n="wifi";break;case"other":case"unknown":n="unknown";break;case"slow-2g":case"2g":case"3g":n="cellular";break;case"4g":n="wifi";break}return n}class f extends d{constructor(){super(),this.handleOnline=()=>{const e={connected:!0,connectionType:w()};this.notifyListeners("networkStatusChange",e)},this.handleOffline=()=>{const n={connected:!1,connectionType:"none"};this.notifyListeners("networkStatusChange",n)},typeof window!="undefined"&&(window.addEventListener("online",this.handleOnline),window.addEventListener("offline",this.handleOffline))}getStatus(){return r(this,null,function*(){if(!window.navigator)throw this.unavailable("Browser does not support the Network Information API");const n=window.navigator.onLine,e=w();return{connected:n,connectionType:n?e:"none"}})}}const b=new f;export{b as Network,f as NetworkWeb};
